#!/usr/bin/env python

# Copyright Adam Papai 2016
# Copyright Parse, Inc. 2013
# This code is made available under the Apache License
# For more info, please see http://www.apache.org/licenses/LICENSE-2.0.html

import argparse
import ConfigParser
import glob
import json
import os

from boto.ec2 import get_region
from boto.ec2.connection import EC2Connection
from boto.exception import BotoServerError
from sys import exit


def get_ec2_rules(security_groups):
    groupset = {}
    for secgroup in security_groups:
        # create a unique identifier of the name, id, and vpc_id
        secgroup_id = "%s:%s:%s:%s" % (secgroup.owner_id, secgroup.name, secgroup.id, secgroup.vpc_id)
        groupset[secgroup_id] = {}
        for rulesetname in ["rules", "rules_egress"]:
            for rule in secgroup.__dict__[rulesetname]:
                ruleset = {}
                for key in ["from_port", "ip_protocol", "to_port"]:
                    ruleset[key] = rule.__dict__[key] if rule.__dict__[key] else "_None"
                rule_id = rulesetname + ":" + "-".join(sorted(ruleset.values()))
                ruleset["grants"] = []
                for grant in rule.grants:
                    # cidr_ip will exist (ip rule) or be None (group rule)
                    if grant.cidr_ip:
                        ruleset["grants"].append(grant.cidr_ip)
                    else:
                        #it's a security group instead of a cidr;
                        # store a string of owner:name:id (names for readability, ids and owners for uniqueness)
                        ruleset["grants"].append("%s:%s:%s" % (grant.owner_id, grant.name, grant.groupId))
                # if we're appending to an existing rule_id (it's not an empty hash), do so here.
                try:
                    groupset[secgroup_id][rule_id]["grants"] += ruleset["grants"]
                except KeyError:
                    groupset[secgroup_id][rule_id] = ruleset
                groupset[secgroup_id][rule_id]["grants"].sort()  # list comes back unruly
    return groupset


def get_local_rules(rule_file):
    fh = open(rule_file)
    comments_removed = ""
    for line in fh:
        if line.strip().startswith("#"):
            continue
        comments_removed += line
    groupset = json.loads(comments_removed)
    fh.close()
    # strip json-formatted comment fields
    for secgroup in groupset:
        for (rule_id, rule) in groupset[secgroup].iteritems():
            rule.pop('comment', None)
            rule["grants"].sort()  # list is unordered
    return groupset


def get_all_local_rules(directory):
    all_rule = {}
    for rule_file in glob.glob("%s/*.json" % directory):
        all_rule.update(get_local_rules(rule_file))

    return all_rule


# give detail about where the rulesets differ
def compare_rulesets(ec2_security_groups, local_security_groups):
    diffdetails = ""
    diffhash = {}
    # are there the same number of security groups?
    ec2groups = set(ec2_security_groups.keys())
    localgroups = set(local_security_groups.keys())
    groupdiff = ec2groups.symmetric_difference(localgroups)
    if groupdiff:
        for eachdiff in groupdiff:
            if eachdiff not in ec2groups:
                diffdetails += "security group %s is missing from ec2\n" % eachdiff
                diffhash[eachdiff] = local_security_groups[eachdiff]
            if eachdiff not in localgroups:
                diffdetails += "security group %s is missing from git\n" % eachdiff
                diffhash[eachdiff] = ec2_security_groups[eachdiff]
    #ok, the for each of the groups that are the same, compare the rules
    for group in ec2groups.intersection(localgroups):
        ec2rules = ec2_security_groups[group].keys()
        ec2rules.sort()
        localrules = local_security_groups[group].keys()
        localrules.sort()
        # go through the ec2 rules looking for differences and extra rules
        for ec2rulekey in ec2rules:
            ec2rule = ec2_security_groups[group].get(ec2rulekey, {})
            localrule = local_security_groups[group].get(ec2rulekey, {})
            if ec2rule == localrule:
                continue
            # ok, we have a rule that's different; let's try to refine the difference
            try:
                ec2ports = {ec2rule['to_port'], ec2rule['from_port'], ec2rule['ip_protocol']}
            except KeyError:
                ec2ports = None
            try:
                localports = {localrule['to_port'], localrule['from_port'], localrule['ip_protocol']}
            except KeyError:
                localports = None
            if ec2ports == localports:
                # grants mismatch
                ec2grants = set(ec2rule['grants'])
                localgrants = set(localrule['grants'])
                grantdiff = ec2grants.symmetric_difference(localgrants)
                if not grantdiff:
                    diffdetails += "The order of grants for the %s security group, %s/%s-%s rule are different." % (
                            group, localrule['ip_protocol'], localrule['from_port'], localrule['to_port'])
                for eachgrant in grantdiff:
                    if eachgrant not in ec2grants:
                        diffdetails += "git has a rule that for the %s security group, %s can reach %s/%s-%s.  This is missing from ec2.\n" % (
                                group, eachgrant, localrule['ip_protocol'], localrule['from_port'], localrule['to_port'])
                        grouphash = diffhash.get(group, {})
                        rulehash = grouphash.get("%s-%s-%s" % (localrule['from_port'], localrule['to_port'], localrule['ip_protocol']), {})
                        rulehash['from_port'] = localrule['from_port']
                        rulehash['to_port'] = localrule['to_port']
                        rulehash['ip_protocol'] = localrule['ip_protocol']
                        grants = rulehash.get('grants', [])
                        grants.append(eachgrant)
                        rulehash['grants'] = grants
                        grouphash["%s-%s-%s" % (localrule['from_port'], localrule['to_port'], localrule['ip_protocol'])] = rulehash
                        diffhash[group] = grouphash

                    if eachgrant not in localgrants:
                        diffdetails += "ec2 has a rule that for the %s security group, %s can reach %s/%s-%s.  This is missing from git.\n" % (
                                group, eachgrant, ec2rule['ip_protocol'], ec2rule['from_port'], ec2rule['to_port'])
                        grouphash = diffhash.get(group, {})
                        rulehash = grouphash.get("%s-%s-%s" % (ec2rule['from_port'], ec2rule['to_port'], ec2rule['ip_protocol']), {})
                        rulehash['from_port'] = ec2rule['from_port']
                        rulehash['to_port'] = ec2rule['to_port']
                        rulehash['ip_protocol'] = ec2rule['ip_protocol']
                        grants = rulehash.get('grants', [])
                        grants.append(eachgrant)
                        rulehash['grants'] = grants
                        rulehash['grants'] = grants
                        grouphash["%s-%s-%s" % (ec2rule['from_port'], ec2rule['to_port'], ec2rule['ip_protocol'])] = rulehash
                        diffhash[group] = grouphash
            else:
                # the ports didn't match.  Identify the entire rule as missing.
                diffdetails += "ec2 has an extra rule in the %s security group: %s/%s-%s is allowed from %s\n" % (
                        group, ec2rule['ip_protocol'], ec2rule['from_port'], ec2rule['to_port'], ec2rule['grants'])
                grouphash = diffhash.get(group, {})
                grouphash["%s-%s-%s" % (ec2rule['from_port'], ec2rule['to_port'], ec2rule['ip_protocol'])] = ec2rule
                diffhash[group] = grouphash
        # go through the local rules looking for extra rules (we've already found differences)
        for localrulekey in localrules:
            ec2rule = ec2_security_groups[group].get(localrulekey, {})
            localrule = local_security_groups[group].get(localrulekey, {})
            if localrule == ec2rule:
                continue
            try:
                ec2ports = {ec2rule['to_port'], ec2rule['from_port'], ec2rule['ip_protocol']}
            except KeyError:
                ec2ports = None
            try:
                localports = {localrule['to_port'], localrule['from_port'], localrule['ip_protocol']}
            except KeyError:
                localports = None
            if ec2ports == localports:
                # grants mismatch, but we've already printed this out, so skip it
                continue
            else:
                # the ports didn't match.  Identify the entire rule as missing.
                diffdetails += "ec2 is missing a rule in the %s security group that is present in git: %s/%s-%s is allowed from %s\n" % (
                        group, localrule['ip_protocol'], localrule['from_port'], localrule['to_port'], localrule['grants'])
                grouphash = diffhash.get(group, {})
                grouphash["%s-%s-%s" % (localrule['from_port'], localrule['to_port'], localrule['ip_protocol'])] = localrule
                diffhash[group] = grouphash
            #diffdetails += "rule exists in git but not in ec2:"
    return diffdetails, diffhash


def dump_ruleset(rules_hash, args):
    for secgroup in sorted(rules_hash.keys()):
        account_id, name, sg_name, vpc = secgroup.split(":")
        group = "{\n %s\n }\n" % generate_secgroup_string(secgroup, rules_hash[secgroup])
        if not os.path.exists("%s/%s/%s" % (args.rule_root, account_id, args.region)):
            os.makedirs("%s/%s/%s" % (args.rule_root, account_id, args.region))
        if vpc != "None":
            filename = "%s/%s/%s/%s_%s_%s.json" % (args.rule_root, account_id, args.region, name, sg_name, vpc)
        else:
            filename = "%s/%s/%s/%s_%s.json" % (args.rule_root, account_id, args.region, name, sg_name)
        with open(filename, "w+") as f:
            f.write(group)


def generate_secgroup_string(secgroup, secgroup_hash):
    # TODO: refactor this, it's too uggly
    indent = 1
    spaces = 4
    secgroup_str = ""
    secgroup_str += '%s"%s": {\n' % ((" "*indent*spaces), secgroup)
    rules = []
    for rule in sorted(secgroup_hash.keys()):
        rules.append(generate_rule_string(rule, secgroup_hash[rule]))
    sep = ",\n"
    secgroup_str += sep.join(rules) + "\n"
    secgroup_str += "%s}" % (" "*indent*spaces)
    return secgroup_str


def generate_rule_string(rule, rule_hash):
    # TODO: refactor this, it's too uggly
    indent = 2
    spaces = 4
    rule_str = ""
    rule_str += '%s"%s": {\n' % ((" "*indent*spaces), rule)
    indent = 3
    rule_str += '%s"from_port": "%s", "to_port": "%s", "ip_protocol": "%s",\n' % (
        (" "*indent*spaces),
        rule_hash['from_port'],
        rule_hash['to_port'],
        rule_hash['ip_protocol'])
    grants = rule_hash['grants']
    if len(grants) == 1:
        rule_str += '%s"grants": [ "%s" ]\n' % ((" "*indent*spaces), grants[0])
    else:
        rule_str += '%s"grants": [\n%s' % ((" "*indent*spaces), (" "*(indent+1)*spaces))
        indent = 4
        sep = ',\n%s' % (" "*indent*spaces)
        rule_str += sep.join(sorted(map(lambda x: '"%s"'%x, grants))) + "\n"
        rule_str += '%s]\n' % (" "*(indent-1)*spaces)
    indent = 2
    rule_str += '%s}' % (" "*indent*spaces)
    return rule_str


def load_aws_config(args):
    try:
        config = ConfigParser.ConfigParser()
        config.read(os.path.expanduser(args.aws_conf))
        aws_access_key_id = config.get(args.profile, "aws_access_key_id")
        aws_secret_access_key = config.get(args.profile, "aws_secret_access_key")
        return aws_access_key_id, aws_secret_access_key
    except IOError, e:
        print "CRITICAL: %s" % e
        exit(2)


def main():
    parser = argparse.ArgumentParser(description="Check our ec2 security groups against the local rules" )
    parser.add_argument('--dump-ec2', dest='dump_ec2', action="store_true", default=False,
                        help="Rather than performing the check, dump the JSON representation of our security groups")
    parser.add_argument('--json-diff', dest='json_diff', action="store_true", default=False,
                        help="Print the changed rules as JSON instead of English")
    parser.add_argument('--nagios-output', dest='nagios_format', action="store_true", default=False,
                        help="Return nagios compatible check result outputs")
    parser.add_argument('-a', '--aws-conf', dest='aws_conf', action="store", default='~/.aws/credentials',
                        help="Path to the AWS config file")
    parser.add_argument('-p', '--aws-profile', dest='profile', action='store', default="default")
    parser.add_argument('-r', '--rule_root', dest='rule_root', action='store', default='rules',
                        help="Path to the local rules root")
    parser.add_argument('-d', '--rule_path', dest='rule_path', action='store',
                        help="Path to the local rules directory")
    parser.add_argument('--region', dest='region', action="store", default='us-east-1', help="AWS region to query")
    args = parser.parse_args()

    aws_access_key_id, aws_secret_access_key = load_aws_config(args)

    try:
        selected_region = get_region(args.region,
                                     aws_access_key_id=aws_access_key_id,
                                     aws_secret_access_key=aws_secret_access_key)

        conn = EC2Connection(aws_access_key_id=aws_access_key_id,
                             aws_secret_access_key=aws_secret_access_key,
                             region=selected_region)

        security_groups = conn.get_all_security_groups()

        ec2set = get_ec2_rules(security_groups)

        if args.dump_ec2:
            dump_ruleset(ec2set, args)
            exit(0)

        localset = get_all_local_rules(args.rule_path)

        if ec2set != localset:
            if args.nagios_format:
                print "CRITICAL: ec2 running security groups are different from the local rules."
            (diffstring, diffhash) = compare_rulesets(ec2set, localset)
            if len(diffstring) == 0:
                print "The rulesets are not the same but I can't find the difference. " \
                      "This might be a false positive.  Dump the rulesets and compare by hand."
            print diffstring

            if args.json_diff:
                print "This output is the union of all differences; " \
                      "missing and added rules from either location are all present here."
                dump_ruleset(diffhash)
            exit(2)
        else:
            if args.nagios_format:
                print "OK - security groups match with local rules."
            exit(0)
    except BotoServerError, e:
        print "CRITICAL: %s" % e
        exit(2)
    except ValueError, e:
        print "CRITICAL: %s" % e
        print "Check your JSON for wayward commas and things. The line number printed ignores comments (so is too low)."
        exit(2)


main()